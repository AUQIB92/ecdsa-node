var assert = require('assert');

var Ecdsa = require('../lib/ecdsa');
var PrivateKey = require('../lib/privateKey');
var PublicKey = require('../lib/publicKey');
var Signature = require('../lib/signature');
var File = require('../lib/utils/file');


describe('ECDSA test', function() {
    describe('#testVerifyRightMessage()', function() {
        it('should confirm authenticity', function() {
            let privateKey = PrivateKey();
            let publicKey = privateKey.publicKey();

            let message = "This is the right message";

            let signature = Ecdsa.sign(message, privateKey);

            assert(Ecdsa.verify(message, signature, publicKey), true);
        });
    });
    describe('#testVerifyWrongMessage()', function() {
        it('should deny authenticity', function() {
            let privateKey = PrivateKey();
            let publicKey = privateKey.publicKey();

            let message1 = "This is the right message";
            let message2 = "This is the wrong message";

            let signature = Ecdsa.sign(message1, privateKey);

            assert (Ecdsa.verify(message2, signature, publicKey), false);
        });
    });
});
describe('openSSL test', function() {
    describe('#testAssign()', function() {
        it('should read and verify PEM file', function() {
            // Generated by: openssl ecparam -name secp256k1 -genkey -out privateKey.pem
            let privateKeyPem = File.read("tests/privateKey.pem");

            let privateKey = PrivateKey.fromPem(privateKeyPem);

            let message = File.read("tests/message.txt");

            let signature = Ecdsa.sign(message=message, privateKey=privateKey);

            let publicKey = privateKey.publicKey();

            assert(Ecdsa.verify(message=message, signature=signature, publicKey=publicKey), true);
        });
    });
    describe('#testVerifySignature()', function() {
        it('should read and verify signature file', function() {
            // openssl ec -in privateKey.pem -pubout -out publicKey.pem

            let publicKeyPem = File.read("tests/publicKey.pem");

            // openssl dgst -sha256 -sign privateKey.pem -out signature.binary message.txt
            let signatureDer = File.read("tests/signatureDer.txt", "rb");

            let message = File.read("tests/message.txt");

            let publicKey = PublicKey.fromPem(publicKeyPem);

            let signature = Signature.fromDer(string=signatureDer);

            assert(Ecdsa.verify(message=message, signature=signature, publicKey=publicKey), true);
        });
    });
});
describe('PrivateKey test', function() {
    describe('#testPemConversion()', function() {
        it('should validate PEM generation and convertion', function() {
            let privateKey1 = PrivateKey();
            let pem = privateKey1.toPem();
            let privateKey2 = PrivateKey.fromPem(pem);

            assert(privateKey1.secret, privateKey2.secret);
            assert(privateKey1.curve, privateKey2.curve);
        });
    });
    describe('#testDerConversion()', function() {
        it('should validate DER generation and convertion', function() {
            let privateKey1 = PrivateKey();
            let der = privateKey1.toDer();
            let privateKey2 = PrivateKey.fromDer(toBytes(der));

            assert(privateKey1.secret, privateKey2.secret);
            assert(privateKey1.curve, privateKey2.curve);
        });
    });
    describe('#testStringConversion()', function() {
        it('should validate private-key-string generation and convertion', function() {
            let privateKey1 = PrivateKey();
            let string = privateKey1.toString();
            let privateKey2 = PrivateKey.fromString(toBytes(string));

            assert(privateKey1.secret, privateKey2.secret);
            assert(privateKey1.curve, privateKey2.curve);
        });
    });
});
describe('PublicKey test', function() {
    describe('#testPemConversion()', function() {
        it('should validate PEM generation and convertion', function() {
            let privateKey = PrivateKey();
            let publicKey1 = privateKey.publicKey();
            let pem = publicKey1.toPem();
            let publicKey2 = PublicKey.fromPem(pem);

            assert(publicKey1.point.x, publicKey2.point.x);
            assert(publicKey1.point.y, publicKey2.point.y);
            assert(publicKey1.curve, publicKey2.curve);
        });
    });
    describe('#testDerConversion()', function() {
        it('should validate DER generation and convertion', function() {
            let privateKey = PrivateKey();
            let publicKey1 = privateKey.publicKey();
            let der = publicKey1.toDer();
            let publicKey2 = PublicKey.fromDer(toBytes(der));

            assert(publicKey1.point.x, publicKey2.point.x);
            assert(publicKey1.point.y, publicKey2.point.y);
            assert(publicKey1.curve, publicKey2.curve);
        });
    });
    describe('#testStringConversion()', function() {
        it('should validate private-key-string generation and convertion', function() {
            let privateKey = PrivateKey();
            let publicKey1 = privateKey.publicKey();
            let string = publicKey1.toString();
            let publicKey2 = PublicKey.fromString(toBytes(string));

            assert(publicKey1.point.x, publicKey2.point.x);
            assert(publicKey1.point.y, publicKey2.point.y);
            assert(publicKey1.curve, publicKey2.curve);
        });
    });
});
describe('Signature test', function() {
    describe('#testDerConversion()', function() {
        it('should validate DER signature generation and convertion', function() {
            let privateKey = PrivateKey();
            let message = "This is a text message";
            let signature1 = Ecdsa.sign(message, privateKey);
            let der = signature1.toDer()
            let signature2 = Signature.fromDer(toBytes(der));

            assert(signature1.r, signature2.r);
            assert(signature1.s, signature2.s);
        });
    });
    describe('#testBase64Conversion()', function() {
        it('should validate Base64 signature generation and convertion', function() {
            let privateKey = PrivateKey();
            let message = "This is a text message";
            let signature1 = Ecdsa.sign(message, privateKey);
            let base64 = signature1.toBase64();
            let signature2 = Signature.fromBase64(base64);

            assert(signature1.r, signature2.r);
            assert(signature1.s, signature2.s);
        });
    });
});
